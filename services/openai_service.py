import os
import logging
from openai import AsyncOpenAI

# Configura√ß√£o do cliente OpenAI
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

async def extract_meeting_info(user_message: str) -> dict:
    """
    Usa IA para interpretar mensagens do usu√°rio e extrair dados da reuni√£o.
    Retorna um dicion√°rio com:
      - titulo
      - data_hora (ISO 8601 ou descri√ß√£o compreens√≠vel)
      - local
      - notas
    """
    try:
        logger.info(f"üîé Extraindo informa√ß√µes da mensagem: {user_message}")

        prompt = f"""
Voc√™ √© uma secret√°ria virtual inteligente. 
O usu√°rio vai enviar mensagens em portugu√™s solicitando agendamento de reuni√µes.

Sua tarefa √© extrair os seguintes campos e retornar em JSON:
- titulo: t√≠tulo da reuni√£o (se n√£o houver, use "Reuni√£o")
- data_hora: data e hora da reuni√£o (em formato ISO 8601 se poss√≠vel, ou texto compreens√≠vel como 'amanh√£ √†s 14h')
- local: local da reuni√£o (se n√£o informado, deixe vazio)
- notas: observa√ß√µes adicionais, como nomes de participantes ou tema (se n√£o houver, deixe vazio)

Exemplo:
Entrada: "Agende uma reuni√£o com Jo√£o amanh√£ √†s 14h no escrit√≥rio sobre o projeto X"
Sa√≠da:
{{
  "titulo": "Reuni√£o sobre o projeto X",
  "data_hora": "amanh√£ √†s 14h",
  "local": "escrit√≥rio",
  "notas": "Participante: Jo√£o"
}}

Agora processe a mensagem do usu√°rio:
"{user_message}"
"""

        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "Voc√™ √© uma assistente experiente em organizar compromissos."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.2
        )

        content = response.choices[0].message.content.strip()

        # Tentativa de converter em dict
        import json
        meeting_info = json.loads(content)

        logger.info(f"‚úÖ Extra√≠do: {meeting_info}")
        return meeting_info

    except Exception as e:
        logger.error(f"‚ùå Erro ao processar mensagem com IA: {e}")
        return {}
